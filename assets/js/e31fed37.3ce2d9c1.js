"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[455],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return y}});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=o.createContext({}),p=function(e){var t=o.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=p(e.components);return o.createElement(i.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),u=p(n),y=r,m=u["".concat(i,".").concat(y)]||u[y]||s[y]||a;return n?o.createElement(m,l(l({ref:t},d),{},{components:n})):o.createElement(m,l({ref:t},d))}));function y(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,l=new Array(a);l[0]=u;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c.mdxType="string"==typeof e?e:r,l[1]=c;for(var p=2;p<a;p++)l[p]=n[p];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1011:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return i},default:function(){return y},frontMatter:function(){return c},metadata:function(){return p},toc:function(){return s}});var o=n(7462),r=n(3366),a=(n(7294),n(3905)),l=["components"],c={sidebar_position:5,title:"Add a block"},i=void 0,p={unversionedId:"developer/block",id:"developer/block",title:"Add a block",description:"This page describes how to add a block to the editor.",source:"@site/docs/developer/block.md",sourceDirName:"developer",slug:"/developer/block",permalink:"/developer/block",editUrl:"https://github.com/Clipteam/doc/edit/master/docs/developer/block.md",tags:[],version:"current",lastUpdatedBy:"SinanGentoo",lastUpdatedAt:1653026923,formattedLastUpdatedAt:"5/20/2022",sidebarPosition:5,frontMatter:{sidebar_position:5,title:"Add a block"},sidebar:"docs",previous:{title:"Load",permalink:"/developer/load"},next:{title:"Advanced Blocks API Usage",permalink:"/developer/advanced-block-usage"}},d={},s=[{value:"Example",id:"example",level:2},{value:"Add blocks",id:"add-blocks",level:3},{value:"Remove blocks",id:"remove-blocks",level:3},{value:"Prototype",id:"prototype",level:2},{value:"Category",id:"category",level:3},{value:"Block",id:"block",level:3}],u={toc:s};function y(e){var t=e.components,n=(0,r.Z)(e,l);return(0,a.kt)("wrapper",(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This page describes how to add a block to the editor."),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("p",null,"To access the extension API, you can require the ",(0,a.kt)("inlineCode",{parentName:"p"},"api")," object."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const { api } = require('clipcc-extension');\n")),(0,a.kt)("h3",{id:"add-blocks"},"Add blocks"),(0,a.kt)("p",null,"Before you can add a block, you must add a category."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"api.addCategory({\n    categoryId: 'your.category.id',\n    messageId: 'your.category.id',\n    color: '#339900' // HEX color code\n});\n")),(0,a.kt)("p",null,"The categoryId is the unique identifier of the category, and the messageId is the text that will be displayed in the category(If you haven't written i18n).\nNow we need to require the ",(0,a.kt)("inlineCode",{parentName:"p"},"type")," object to define the type of the block."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const { type } = require('clipcc-extension');\n")),(0,a.kt)("p",null,"then we can add a block."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"api.addBlock({\n    opcode: 'your.block.id',\n    type: type.BlockType.REPORTER,\n    messageId: 'your.block.id',\n    categoryId: 'your.category.id',\n    param: {\n        VALUE: {\n            type: type.ParameterType.STRING,\n            default: 'Hello World!'\n        }\n    },\n    function: args => args.VALUE\n});\n")),(0,a.kt)("p",null,"The opcode is the unique identifier of the block, and the messageId is the text that will be displayed in the block(If you haven't written i18n). The categoryId is the category that the block belongs to. The param is the parameter of the block, and the function is the function that will be executed when the block is executed. The function will receive the parameter as an argument."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"We recommend using arrow functions instead of defining them in the class"),", because ",(0,a.kt)("inlineCode",{parentName:"p"},"this")," may be lost."),(0,a.kt)("h3",{id:"remove-blocks"},"Remove blocks"),(0,a.kt)("p",null,"For some reasons, you may want to remove a block."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"api.removeBlock('your.block.id');\n")),(0,a.kt)("p",null,"If you want to remove a category, you can use"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"api.removeCategory('your.category.id');\n")),(0,a.kt)("p",null,"It will remove all the blocks in that category. We recommend you remove the category when the extension is unloaded."),(0,a.kt)("h2",{id:"prototype"},"Prototype"),(0,a.kt)("h3",{id:"category"},"Category"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"class CategoryPrototype {\n    categoryId: string;\n    messageId: string;\n    color: string;\n}\n\nfunction addCategory(category: CategoryPrototype): void;\nfunction removeCategory(categoryId: string): void;\n")),(0,a.kt)("h3",{id:"block"},"Block"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"interface BlockPrototype {\n    opcode: string;\n    type: BlockType;\n    option?: BlockOption;\n    messageId: string;\n    categoryId: string;\n    function: Function;\n    param?: { [key: string]: ParameterPrototype };\n}\n\nenum BlockType {\n    COMMAND, REPORTER, BOOLEAN, BRANCH, HAT\n}\n\nclass ParameterPrototype {\n    type: ParameterType;\n    default: any;\n    shadow: ShadowPrototype;\n}\n\nenum ParameterType {\n    NUMBER, STRING, BOOLEAN, ANY\n}\n\nclass ShadowPrototype {\n    type: string;\n    fieldName: string;\n}\n\nclass BlockOption {\n    terminal?: boolean;\n    monitor?: boolean;\n}\n\nfunction addBlock(block: BlockPrototype): void;\nfunction removeBlock(opcode: string): void;\n")))}y.isMDXComponent=!0}}]);